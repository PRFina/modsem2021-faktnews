
/* Trova titolo review e nome autore di una data FactCheckingOrganization
   con ricerca per nome della FCO "approssimata", ovvero con regex.

   In questo caso il risultato ritorna le review della voce.info
*/
SELECT ?rname ?fcname ?fconame
WHERE {
      ?r a fn:Review; fn:isReviewedBy ?fc; dct:title ?rn.
      ?fc fn:affiliatedTo ?fco; schema:name ?fcn.
      ?fco a fn:FactCheckingOrganization.
     

      ?fco schema:name ?fcon.
      FILTER(REGEX(?fcon, "voce","i")).
      BIND(STR(?rn) AS ?rname).	
      BIND(STR(?fcn) AS ?fcname)
      BIND(STR(?fcon) AS ?fconame).

} LIMIT 100


/*
Trova tutti i claim che non hanno nessuna review.
Sfrutta l'operatore MINUS per trovare tutti i claim con review
attraverso il predicato :claimReviewed (ricordiamo essere una property chain)
e successivamente gli sottrae da tutti i claims disponibili nel knowledge graph
*/

PREFIX : <http://www.modsem.org/fakt-news#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX fn: <http://www.modsem.org/fakt-news#>
PREFIX schema: <http://schema.org/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?claim ?claimant_name
WHERE { 
    ?claim a :Claim; 
       :isClaimedBy ?claimant .
    ?claimant schema:name ?claimant_name.
    MINUS {
       ?rev :claimReviewed ?claim. 
    }
} limit 100 

/*
Trova tutti i claim la cui data di pubblicazione è compresa in un intervallo.
I valori dell'inizio e fine del range sono hardcoded nella query e bindati con
first_date e last_date.

Nel caso specifico, i valore inseriti permettono di recuperare tutti e i soli claim del 2020.

La particolaritòà della query è nell aver utilizzatop il costruttore xsd:datetime poiché
il confronto tra date è specificato dallo standard solo per tipi datetime
*/

PREFIX : <http://www.modsem.org/fakt-news#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX fn: <http://www.modsem.org/fakt-news#>
PREFIX schema: <http://schema.org/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT ?claim ?claim_date
WHERE { 
    ?claim a :Claim; dct:date ?claim_date
    BIND("2020-01-01T00:00:00Z"^^xsd:dateTime AS ?first_date)
    BIND("2021-01-01T00:00:00Z"^^xsd:dateTime AS ?last_date)
    BIND(xsd:dateTime(?claim_date) AS ?claim_datetime)
    FILTER( ?claim_datetime > ?first_date && ?claim_datetime < ?last_date )

} limit 100 



/*
Query federata. Nella prima parte estrae le entità menzionate in una review.
Nella seconda contatta l'endpoint pubblico di DbPedia ed effettua una query federata.

Di particolare importanza sono i comandi per ?entity. Questi costruiscono dinamicamente
l'uri della risorsa in wikipedia dato che nella nostra ontologia ?wiki_entity codifica
il NAME dell url delle pagine di wikipedia.

Dato l'aspetto multingua di dbpedia il comando FILTER serve per estrarre solo le risorse con
uno specifico language tag (in questo caso "en").

La query federata estrae alcune informazioni principali delle entità menzionate, ovvero:
?entity_label -> label associata alla risorsa
?info -> informazioni di background
?linked_res_wiki _> pagina url di alcune risorse secondaria correlate all'entità

*/
PREFIX : <http://www.modsem.org/fakt-news#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbr:  <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>



SELECT ?review_title ?entity_label ?info ?linked_res_wiki
WHERE { 
    ?review a :Review; 
            dct:title ?review_title.
    OPTIONAL {?review :mention ?wiki_entity.}
    BIND(URI(CONCAT(STR(dbr:), STR(?wiki_entity))) AS ?entity).
 	
    SERVICE <https://dbpedia.org/sparql> {
        ?entity rdfs:label ?entity_label.
		OPTIONAL {?entity rdfs:seeAlso ?linked_res.
        		  ?linked_res foaf:isPrimaryTopicOf ?linked_res_wiki}.
        OPTIONAL {?entity rdfs:comment ?info}.
        FILTER(langMatches(lang(?entity_label), "en") && 
               langMatches(lang(?info),"en"))
    }
   
} limit 100 



/*
Query Aggregata. La query permette di verificare la "credibility"
di una persona. Nello specifico conta per ogni
claimant quanti dei claim effettuati siano stati valutati "true", ..., "false".

Il conteggio viene effettuato dalla fuznione COUNT sulle due chiavi di raggruppamento
?claimant_name ?rating_val.
*/

PREFIX : <http://www.modsem.org/fakt-news#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX schema: <http://schema.org/>

SELECT ?claimant_name ?rating_val (COUNT(?review) as ?n_reviews)
WHERE {
    ?review rdf:type :Review;
            :hasRating ?rating;
            :claimReviewed ?claim.
    ?claim :isClaimedBy ?claimant.
    ?claimant schema:name ?claimant_name.
    ?rating :ratingValue ?rating_val.
    
}
GROUPBY ?claimant_name ?rating_val
ORDER BY ?claimant_name ?rating_val


/*TODO Check Trusted Author 
Dato un autore verificare se appartiene ad una factchecking organization certificata/trusted
Utilizzare una query di tipo ASK.
*/

PREFIX : <http://www.modsem.org/fakt-news#>
PREFIX fn: <http://www.modsem.org/fakt-news#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX schema: <http://schema.org/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX prov: <http://www.w3.org/ns/prov#>

# Q6 - Check trusted author (reviewer)

SELECT ?id ?agent ?code
WHERE {
    ?a a prov:Agent; fn:observeCodeOfPrinciples ?code.
    ?a schema:name ?agent.
    
    BIND(STR(?a) as ?id)
} LIMIT  100


/*TODO Show All related review
Dato un claim recuperare tutte le review (con data e object propertie associate) collegate
*/

PREFIX : <http://www.modsem.org/fakt-news#>
PREFIX fn: <http://www.modsem.org/fakt-news#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX schema: <http://schema.org/>
PREFIX dct: <http://purl.org/dc/terms/>

/* Q7 - Finds all the associated review for a claim. */

SELECT ?claim ?reviewer ?rating ?judgment ?content ?language ?tag ?url ?mention
WHERE {
    ?claim a fn:Claim; fn:associatedReview ?associatedReview.
    ?associatedReview fn:isReviewedBy ?agent.
    ?agent schema:name ?reviewer.
    ?associatedReview fn:hasRating ?r.
    ?r fn:ratingValue ?rating.
    ?associatedReview fn:hasJudgment ?j.
    ?j fn:judgmentSummary ?judgment.
    ?associatedReview fn:reviewContent ?content.
    ?associatedReview dct:language ?language.
    ?associatedReview fn:tag ?tag.
    ?associatedReview schema:url ?url.
    ?associatedReview fn:mention ?mention.
} LIMIT  100



/*Q8 get claimant last claims
Dato un claimant recuperare tutte gli ultimi claims associati (ordinati --> SORT BY date)
*/
PREFIX : <http://www.modsem.org/fakt-news#>
PREFIX fn: <http://www.modsem.org/fakt-news#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX schema: <http://schema.org/>
PREFIX dct: <http://purl.org/dc/terms/>



SELECT ?claimant ?claim ?url ?content ?language
WHERE {
    ?claim a fn:Claim; fn:isClaimedBy ?someone.
    ?someone schema:name ?claimant.
    ?claim schema:url ?url.
    ?claim fn:claimContent ?content.
    ?claim dct:language ?language.
} LIMIT  100



/* Get social accounts of mentioned entities

First retrieve mentioned entities from dbpedia.
Than extract from dbpedia the same entity linked externally with wikidata.

This query use two federated queries. The former to dbpedia endpoint, the latter to wikidata endopoint.

the "glue" information between the two external queries is the ?wiki_entity variable, builded inside the first
one and used in the second one as entity subject.
*/


PREFIX : <http://www.modsem.org/fakt-news#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbr:  <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>

SELECT DISTINCT ?entity_label ?twt ?fb ?ig
WHERE { 
    ?review a :Review; 
    OPTIONAL {?review :mention ?entity.}
    BIND(URI(CONCAT(STR(dbr:), STR(?entity))) AS ?dbp_entity). # Build dbpedia URI
    
    SERVICE <https://dbpedia.org/sparql> {
        ?dbp_entity a foaf:Person; 
                    rdfs:label ?entity_label
        OPTIONAL{?dbp_entity owl:sameAs ?linked_res} # retrieve same linked instances on other repositories

        FILTER(contains(str(?linked_res), "wikidata")) # keep only wikidata instance
        BIND(REPLACE(str(?linked_res), "(.+?)([A-Z0-9]+)", "$2") AS ?wiki_code) # extract wikidata id code from uri
        BIND(URI(CONCAT(STR(wd:), STR(?wiki_code))) AS ?wiki_entity) # build wikidata uri
    }
    
    FILTER(langMatches(lang(?entity_label), "en"))
    
    SERVICE <https://query.wikidata.org/sparql> { #retrieve social account
        OPTIONAL{?wiki_entity wdt:P2013 ?fb_name; # facebook account
                              wdt:P2002 ?twt_name.} # twitter account
        OPTIONAL{?wiki_entity wdt:P2003 ?ig_name.} #ig account

        BIND(URI(CONCAT("https://www.facebook.com/", ?fb_name)) as ?fb)
        BIND(URI(CONCAT("https://twitter.com/", ?twt_name)) as ?twt)
        BIND(URI(CONCAT("https://www.instagram.com/", ?ig_name)) as ?ig)
        }

} limit 100 




/* TODO ranking dei claimant
creare un ranking ordinando gli autori con claims "maggiormente revisionati"
*/

PREFIX : <http://www.modsem.org/fakt-news#>
PREFIX fn: <http://www.modsem.org/fakt-news#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX schema: <http://schema.org/>
PREFIX dct: <http://purl.org/dc/terms/>

/* Q10 - Claimant's Ranking */

SELECT ?claimant (count(?claim) as ?numberClaims)
WHERE {
    ?claim a fn:Claim; fn:isClaimedBy ?someone.
    ?someone schema:name ?claimant.
} 
GROUP BY ?claimant
ORDER BY ?numberClaims
LIMIT  100


/* Adanced Query with filters */

PREFIX : <http://www.modsem.org/fakt-news#>
PREFIX fn: <http://www.modsem.org/fakt-news#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX schema: <http://schema.org/>

SELECT ?claim ?author ?claim_date ?content ?language
WHERE { 
    # Required
	?claim fn:claimContent ?content.
	FILTER(contains(?content, "")).
    
    # Filtering on claim author
    ?claim fn:isClaimedBy ?agent.
    ?agent schema:name ?author.
    FILTER(contains(?author, "")).

    # Filtering on date
	?claim a fn:Claim; dct:date ?claim_date.

	BIND("2000-01-01T00:00:00Z"^^xsd:dateTime AS ?first_date).
	BIND("2021-03-01T00:00:00Z"^^xsd:dateTime AS ?last_date).
	BIND(xsd:dateTime(?claim_date) AS ?claim_datetime).
	FILTER( ?claim_datetime > ?first_date && ?claim_datetime < ?last_date ).
    
    # Filtering on language
    ?claim dct:language ?language.
    # Note, it works with contains and not with =
    # Because for definition each string contains a substring of ""
    FILTER(contains(?language, "")).
}
LIMIT 100 

